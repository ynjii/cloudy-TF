name: 'Terraform CI/CD'
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 수동 트리거 추가
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # 환경 변수 설정
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_rds_password: ${{ secrets.DB_PASSWORD }}
    steps:
      # 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3
      # Terraform 설치
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      # Terraform 초기화
      - name: Terraform Init
        run: terraform init
      # Terraform 포맷 검사
      #- name: Terraform Format
      #  run: terraform fmt -check
      # Terraform 검증
      - name: Terraform Validate
        run: terraform validate
      # Terraform 계획 (PR 및 푸시 시)
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        
      # Terraform 적용 (메인 브랜치 푸시 시)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply tfplan
        
      # 출력값 저장 (선택 사항)
      - name: Save Terraform Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mkdir -p ./terraform-output
          terraform output -json > ./terraform-output/output.json
          terraform output -raw ssh_private_key_pem > ./terraform-output/private-key.pem
          chmod 600 ./terraform-output/private-key.pem
          echo "서버 IP: $(terraform output -raw web_instance_public_ips)" > ./terraform-output/server-info.txt
          
      # 출력값 아티팩트로 저장 (선택 사항)
      - name: Upload Terraform Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-output
          path: ./terraform-output/

# Terraform 삭제 (수동으로 트리거 시)
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - name: Terraform Init
        run: terraform init
      - name: Terraform Destroy
        run: terraform destroy -auto-approve